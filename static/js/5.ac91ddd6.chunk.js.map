{"version":3,"sources":["store/shop/shop.selectors.js","components/with-spinner/with-spinner.component.jsx","components/collection-item/collection-item.styles.jsx","components/collection-item/collection-item.component.jsx","pages/collection/collection.component.jsx","pages/collection/collection.container.jsx","components/collection-preview/collection-preview.styles.jsx","components/collection-preview/collection-preview.component.jsx","components/collections-overview/collections-overview.component.jsx","components/collections-overview/collections-overview.container.jsx","pages/shop/shop.component.jsx"],"names":["selectShop","state","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","keys","map","key","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded","WithSpinner","WrappedComponent","isLoading","otherProps","CollectionItemContainer","styled","div","AddButton","CustomButton","BackgroundImage","imageUrl","CollectionFooterContainer","NameContainer","span","PriceContainer","connect","dispatch","addItem","item","name","price","className","onClick","inverted","ownProps","collectionUrlParam","collectionId","match","params","collection","title","items","id","mapStateToProps","createStructuredSelector","CollectionContainer","compose","CollectionPage","CollectionPreviewContainer","TitleContainer","h1","PreviewContainer","CollectionPreview","history","routeName","push","path","toUpperCase","filter","idx","otherCollectionProps","CollectionsOverviewContainer","CollectionsOverview","fetchCollectionsStart","useEffect","exact","component"],"mappings":"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","file":"static/js/5.ac91ddd6.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector(\n\t[ selectShop ],\n\tshop => shop.collections\n);\n\nexport const selectCollectionsForPreview = createSelector(\n\t[ selectCollections ],\n\tcollections => collections\n\t\t? Object.keys(collections).map(key => collections[key])\n\t\t: [] // if the data has not yet come from the database\n);\n\n// looking for the category received from the URL\n// transfers only this data group for output on one page\nexport const selectCollection = collectionUrlParam => createSelector(\n\t\t[ selectCollections ],\n\t\tcollections => collections\n\t\t\t? collections[collectionUrlParam]\n\t\t\t: null // if the data has not yet come from the database\n\t);\n\nexport const selectIsCollectionFetching = createSelector(\n\t[ selectShop ],\n\tshop => shop.isFetching\n);\n\n// if data has not yet come from db, return false if data come return true\nexport const selectIsCollectionsLoaded = createSelector(\n\t[ selectShop ],\n\tshop => !!shop.collections\n);","import React from 'react';\n\nimport Spinner from \"components/spinner/spinner.component\";\n\n\nconst WithSpinner = WrappedComponent => {\n  return ({ isLoading, ...otherProps }) => {\n    return isLoading ? (\n      <Spinner />\n    ) : (\n      <WrappedComponent {...otherProps} />\n    );\n  };\n};\n\n\nexport default WithSpinner;\n","import styled from 'styled-components';\nimport CustomButton from 'components/custom-button/custom-button.component';\n\n\nexport const CollectionItemContainer = styled.div`\n  width: 22vw;\n  display: flex;\n  flex-direction: column;\n  height: 350px;\n  align-items: center;\n  position: relative;\n  \n  &:hover {\n    .image {\n      opacity: 0.8;\n    }\n\n    button {\n      opacity: 0.85;\n      display: flex;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    width: 40vw;\n\n    &:hover {\n      .image {\n        opacity: unset;\n      }\n\n      button {\n        opacity: unset;\n      }\n    }\n  }\n`;\n\nexport const AddButton = styled(CustomButton)`\n  width: 80%;\n  opacity: 0.7;\n  position: absolute;\n  top: 255px;\n  display: none;\n\n  @media screen and (max-width: 800px) {\n    display: block;\n    opacity: 0.9;\n    min-width: unset;\n    padding: 0 10px;\n  }\n`;\n\nexport const BackgroundImage = styled.div`\n  width: 100%;\n  height: 95%;\n  margin-bottom: 5px;\n  background-image: ${ ({ imageUrl }) => `url(${ imageUrl })`};\n  background-color: #c0c3c3;\n  background-size: cover;\n`;\n\nexport const CollectionFooterContainer = styled.div`\n  width: 100%;\n  height: 5%;\n  display: flex;\n  justify-content: space-between;\n  font-size: 18px;\n`;\n\nexport const NameContainer = styled.span`\n  width: 90%;\n  margin-bottom: 15px;\n`;\n\nexport const PriceContainer = styled.span`\n  width: 10%;\n  text-align: right;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { addItem } from \"store/cart/cart.actions\";\n\nimport { CollectionItemContainer, CollectionFooterContainer, AddButton, BackgroundImage, NameContainer, PriceContainer } from './collection-item.styles';\n\n\nconst CollectionItem = ({ item, addItem }) => {\n  const { name, price, imageUrl } = item;\n  \n  return (\n    <CollectionItemContainer>\n      <BackgroundImage className='image' imageUrl={ imageUrl } />\n      \n      <CollectionFooterContainer>\n        <NameContainer>{ name }</NameContainer>\n        <PriceContainer>{ price }</PriceContainer>\n      </CollectionFooterContainer>\n      \n      <AddButton onClick={ () => addItem(item) } inverted>Add to cart</AddButton>\n    </CollectionItemContainer>\n  );\n};\n\n\nconst mapDispatchToProps = dispatch => ({\n  addItem: item => dispatch(addItem(item))\n});\n\n\nexport default connect(null, mapDispatchToProps)(CollectionItem);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { selectCollection } from 'store/shop/shop.selectors';\n\nimport CollectionItem from 'components/collection-item/collection-item.component';\n\nimport './collection.styles.scss';\n\n\nconst CollectionPage = ({ collection }) => {\n  const { title, items } = collection;\n  \n  return (\n    <div className='collection-page'>\n      <h2 className='title'>{ title }</h2>\n      <div className='items'>\n        {\n          items.map(item => (\n            <CollectionItem key={ item.id } item={ item } />\n          ))\n        }\n      </div>\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const { collectionId } = ownProps.match.params;\n  \n  return {\n    collection: selectCollection(collectionId)(state)\n  }\n};\n\n\nexport default connect(mapStateToProps)(CollectionPage);\n","import { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from \"redux\";\n\nimport { selectIsCollectionsLoaded } from \"store/shop/shop.selectors\";\n\nimport WithSpinner from 'components/with-spinner/with-spinner.component';\nimport CollectionPage from \"./collection.component\";\n\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: state => !selectIsCollectionsLoaded(state)\n});\n\n\nconst CollectionContainer = compose(\n  connect(mapStateToProps),\n  WithSpinner\n)(CollectionPage);\n\nexport default CollectionContainer;\n","import styled from 'styled-components';\n\nexport const CollectionPreviewContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 30px;\n\n  @media screen and (max-width: 800px) {\n    align-items: center;\n  }\n`;\n\nexport const TitleContainer = styled.h1`\n  font-size: 28px;\n  margin-bottom: 25px;\n  cursor: pointer;\n\n  &:hover {\n    color: grey;\n  }\n`;\n\nexport const PreviewContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  @media screen and (max-width: 800px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 15px;\n  }\n`;\n","import React from 'react';\n\nimport CollectionItem from 'components/collection-item/collection-item.component';\n\nimport { CollectionPreviewContainer, TitleContainer, PreviewContainer } from './collection-preview.styles';\n\n\nconst CollectionPreview = ({ title, items, history, match, routeName }) => (\n  <CollectionPreviewContainer>\n    <TitleContainer onClick={ () => history.push(`${ match.path }/${ routeName }`) }>\n      { title.toUpperCase() }\n    </TitleContainer>\n    \n    <PreviewContainer>\n      {\n        items\n          .filter((item, idx) => idx < 4)\n          .map(item => (<CollectionItem key={ item.id } item={ item } />) )\n      }\n    </PreviewContainer>\n  </CollectionPreviewContainer>\n);\n\n\nexport default CollectionPreview;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport CollectionPreview from 'components/collection-preview/collection-preview.component';\n\nimport { selectCollectionsForPreview } from 'store/shop/shop.selectors';\n\nimport './collections-overview.styles.scss';\n\n\nconst CollectionsOverview = ({ collections }) => (\n\t<div className='collections-overview'>\n\t\t{\n\t\t\tcollections.map(({ id, ...otherCollectionProps }) => (\n\t\t\t\t<CollectionPreview key={ id } { ...otherCollectionProps } />\n\t\t\t))\n\t\t}\n\t</div>\n);\n\n\nconst mapStateToProps = createStructuredSelector({\n\tcollections: selectCollectionsForPreview\n});\n\n\nexport default connect(mapStateToProps)(CollectionsOverview);\n","import { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from \"redux\";\n\nimport { selectIsCollectionFetching } from \"store/shop/shop.selectors\";\n\nimport WithSpinner from 'components/with-spinner/with-spinner.component';\nimport CollectionsOverview from 'components/collections-overview/collections-overview.component';\n\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: selectIsCollectionFetching\n});\n\n\n\nconst CollectionsOverviewContainer = compose(\n  connect(mapStateToProps),\n  WithSpinner\n)(CollectionsOverview);\n\nexport default CollectionsOverviewContainer;\n","import React, { useEffect } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { fetchCollectionsStart } from \"store/shop/shop.actions\";\n\nimport CollectionContainer from \"pages/collection/collection.container\";\nimport CollectionsOverviewContainer from 'components/collections-overview/collections-overview.container'\n\n\nconst ShopPage = ({ fetchCollectionsStart, match }) => {\n  useEffect(() => {\n    fetchCollectionsStart(); // start data request to firebase db using saga\n  }, [ fetchCollectionsStart ]);\n  \n  return (\n    <div className='shop-page'>\n      <Route\n        exact\n        path={`${ match.path }`}\n        component={ CollectionsOverviewContainer }\n      />\n      <Route\n        path={`${ match.path }/:collectionId`}\n        component={ CollectionContainer }\n      />\n    </div>\n  );\n};\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"],"sourceRoot":""}